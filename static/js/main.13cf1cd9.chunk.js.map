{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","selectedTodo","getVisibleTodo","todos","props","visibleTodo","lowerQuery","toLocaleLowerCase","filter","todo","title","includes","completed","onUserSelection","this","className","type","placeholder","value","onChange","event","setState","target","name","map","classNames","checked","readOnly","onClick","userId","id","React","Component","BASE_URL","loadTodos","a","limit","fetch","response","json","loadUser","CurrentUser","user","prevProps","reloadUser","onUserClear","email","phone","App","selectedUserId","handleUserSelection","handleUserClear","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13cf1cd9.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  onUserSelection: (userId: number) => void;\n  todos: Todo[];\n};\n\ntype State = {\n  query: string;\n  selectedTodo: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    query: '',\n    selectedTodo: 'allTodos',\n  };\n\n  getVisibleTodo = () => {\n    const { todos } = this.props;\n    const { query, selectedTodo } = this.state;\n\n    let visibleTodo = todos;\n\n    if (query) {\n      const lowerQuery = query.toLocaleLowerCase();\n\n      visibleTodo = todos.filter(todo => todo.title.toLocaleLowerCase().includes(lowerQuery));\n    }\n\n    switch (selectedTodo) {\n      case 'active':\n        return visibleTodo.filter(todo => !todo.completed);\n\n      case 'completed':\n        return visibleTodo.filter(todo => todo.completed);\n\n      default:\n        break;\n    }\n\n    return visibleTodo;\n  };\n\n  render() {\n    const { onUserSelection } = this.props;\n    const { query, selectedTodo } = this.state;\n\n    const visibleTodo = this.getVisibleTodo();\n\n    return (\n      <div className=\"TodoList\">\n        <div className=\"TodoList__nav\">\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Enter todo\"\n              value={query}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                this.setState({ query: event.target.value });\n              }}\n            />\n          </div>\n          <select\n            name=\"todos\"\n            value={selectedTodo}\n            onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {\n              this.setState({ selectedTodo: event.target.value });\n            }}\n          >\n            <option value=\"allTodos\">\n              All todos\n            </option>\n            <option value=\"active\">\n              Active todos\n            </option>\n            <option value=\"completed\">\n              Completed todos\n            </option>\n          </select>\n        </div>\n        <h2>\n          Todos:\n        </h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodo.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  onClick={() => onUserSelection(todo.userId)}\n                  type=\"button\"\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = async (limit = 10) => {\n  const response = await fetch(`${BASE_URL}/todos?limit=${limit}`);\n\n  return response.json();\n};\n\nexport const loadUser = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport { loadUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  onUserClear: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    const user = await loadUser(this.props.userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.reloadUser(this.props.userId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await loadUser(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    const { onUserClear } = this.props;\n\n    if (!user) {\n      return (\n        <div> User not found </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n          \"\n          onClick={() => onUserClear()}\n          type=\"button\"\n        >\n          Clear\n        </button>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api/api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const data = await loadTodos();\n\n    this.setState({\n      todos: data,\n    });\n  }\n\n  handleUserSelection = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  handleUserClear = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserSelection={this.handleUserSelection}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId\n              ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  onUserClear={this.handleUserClear}\n                />\n              )\n              : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}